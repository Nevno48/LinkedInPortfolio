#BlueJ class context
comment0.target=BinarySearchTree
comment1.params=
comment1.target=BinarySearchTree()
comment10.params=value
comment10.target=boolean\ contains(double)
comment10.text=\r\n\ \ See\ if\ a\ value\ exists\ in\ the\ binary\ search\ tree.\ \ Implement\ this\r\n\ \ recursively\ and\ you'll\ need\ a\ recursive\ helper\ method.\r\n\r\n\ @param\ value\ the\ value\ to\ search\ for\r\n\ @return\ true\ if\ the\ value\ is\ found,\ false\ otherwise\r\n
comment11.params=value\ n
comment11.target=boolean\ recursiveContains(double,\ BinarySearchTree.Node)
comment12.params=
comment12.target=int\ numAs()
comment13.params=n
comment13.target=int\ recursiveNumAs(BinarySearchTree.Node)
comment14.params=
comment14.target=double\ getSmallest()
comment15.params=n
comment15.target=double\ recursiveGetSmallest(BinarySearchTree.Node)
comment16.params=value
comment16.target=void\ addIterative(double)
comment16.text=\r\n\ Adds\ the\ value\ to\ the\ binary\ search\ tree.\ Implement\ this\ \r\n\ iteratively.\r\n\ \r\n\ @param\ value\ the\ value\ to\ insert\ into\ the\ tree\r\n
comment17.params=
comment17.target=double\ getLargestIterative()
comment17.text=\r\n\ Returns\ the\ largest\ value\ in\ the\ tree.\ Assumes\ the\ tree\ \r\n\ contains\ at\ least\ one\ value.\ All\ the\ work\ is\ done\ in\ \r\n\ the\ helper\ method\ that\ takes\ a\ Node\ for\ an\ argument.\r\n\ So\ write\ your\ code\ in\ the\ next\ method\!\!\ Do\ not\ modify\ \r\n\ this\ one\!\r\n\ \r\n\ @return\ the\ largest\ value\ in\ the\ (non-empty)\ tree\r\n
comment18.params=n
comment18.target=double\ getLargestIterative(BinarySearchTree.Node)
comment18.text=\r\n\ Returns\ the\ largest\ value\ in\ the\ tree\ rooted\ at\ n.\ \r\n\ A\ precondition\ for\ calling\ this\ method\ is\ that\ the\ \r\n\ tree\ contains\ at\ least\ one\ value.\ \ Implement\ this\ \r\n\ iteratively.\ Make\ sure\ you\ start\ looking\ for\ the\ largest\r\n\ from\ node\ n,\ and\ not\ from\ the\ root\ of\ the\ entire\ tree\!\r\n\ \r\n\ @param\ n\ root\ of\ subtree\ being\ searched\ \r\n\ @return\ the\ largest\ value\ in\ subtree\ rooted\ at\ node\ n\r\n
comment19.params=
comment19.target=void\ removeLargestIterative()
comment19.text=\r\n\ Removes\ the\ largest\ value\ in\ the\ tree.\ \r\n\ All\ the\ work\ is\ done\ in\ the\ helper\ method\ that\ takes\ a\ Node\ \r\n\ for\ an\ argument.\ So\ write\ your\ code\ in\ the\ next\ method\!\!\ \r\n\ Do\ not\ modify\ this\ one\!\r\n
comment2.params=value
comment2.target=void\ add(double)
comment20.params=n
comment20.target=void\ removeLargestIterative(BinarySearchTree.Node)
comment20.text=\r\n\ Removes\ the\ largest\ value\ in\ the\ tree\ rooted\ at\ n.\ \r\n\ Preconditions\ for\ calling\ this\ method\ are\ that\ \r\n\ n\ is\ not\ null\ and\ n\ itself\ does\ not\ contain\ the\ \r\n\ largest\ value\ in\ its\ subtree.\ In\ other\ words,\r\n\ n.right\ \!\=\ null.\ \r\n\ Implement\ this\ iteratively.\ Make\ sure\ you\ start\ \r\n\ looking\ for\ the\ largest\ starting\ from\ node\ n,\ and\ \r\n\ not\ from\ the\ root\ of\ the\ entire\ tree\!\r\n\ \r\n\ @param\ n\ root\ of\ subtree\ whose\ largest\ value\ is\ removed\ \r\n
comment21.params=value
comment21.target=void\ remove(int)
comment21.text=\r\n\ Removes\ one\ copy\ of\ the\ value\ from\ the\ tree.\ If\ value\ is\r\n\ not\ in\ tree,\ it\ does\ nothing.\r\n\ \r\n\ @param\ value\ the\ value\ being\ removed\r\n
comment3.params=value\ n
comment3.target=void\ recursiveAdd(double,\ BinarySearchTree.Node)
comment4.params=
comment4.target=void\ printAll()
comment5.params=n
comment5.target=void\ recursivePrintAll(BinarySearchTree.Node)
comment6.params=
comment6.target=double\ sum()
comment6.text=\r\n\ \ Compute\ the\ sum\ of\ all\ values\ in\ the\ binary\ search\ tree.\ \ Implement\r\n\ \ this\ recursively\ and\ you'll\ need\ a\ recursive\ helper\ method.\r\n\r\n\ @return\ the\ sum\ of\ values\ in\ the\ BST\r\n
comment7.params=n
comment7.target=double\ recursiveSum(BinarySearchTree.Node)
comment8.params=
comment8.target=int\ numLeaves()
comment9.params=n
comment9.target=int\ recursiveNumLeaves(BinarySearchTree.Node)
numComments=22
